{"version":3,"file":"static/webpack/static/development/pages/index.js.b2ceb6f7b1d54916d80b.hot-update.js","sources":["webpack:///./components/Posts/List.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { graphql } from \"react-apollo\";\nimport React from 'react';\n\n\nconst Posts = (\n    { data: { loading, error, posts }, search },\n    req\n) => {\n    if(error) return 'Error loading posts';\n    if(posts && posts.length) {\n        const searchQuery = posts.filter(query => {\n            query.name.toLowerCase().includes(search)\n        });\n\n        if(searchQuery.length) {\n            return (\n                <div>\n                    {\n                        searchQuery.map((el, idx) => {\n                          return (\n                              <div key={idx}>\n                                  <div>\n                                      {el.name}\n                                  </div>\n                                  <div>\n                                      {el.id}\n                                  </div>\n                                  <div>\n                                      {el.description}\n                                  </div>\n                              </div>\n                          )\n                        })\n                    }\n                </div>\n            )\n        }\n    }\n};\n\n\nconst query = gql `{\n    posts {\n        id\n        name\n        description\n        image {\n            url\n        }\n    }\n}`;\n\nPosts.getInitialProps = async () => {\n    const res = await fetch('https://api.github.com/repos/zeit/next.js');\n    const json = await res.json();\n    return { stars: json.stargazers_count }\n};\n\nexport default graphql(query, {\n    props: ({ data }) => ({\n        data\n    })\n})(Posts);\n","import _Promise from \"../../core-js/promise\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAIA;AACA;AACA;AACA;AAEA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAGA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AADA;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}