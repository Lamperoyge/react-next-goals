{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar _jsxFileName = \"/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { NetworkStatus } from 'apollo-boost';\nimport { graphql } from \"react-apollo\";\nimport React from 'react';\nconst ALL_POSTS_QUERY = gql`{\n    posts {\n        id\n        name\n        description\n        image {\n            url\n        }\n    }\n}`;\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: 10\n};\nexport default function PostList() {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(ALL_POSTS_QUERY, {\n    variables: allPostsQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: allPosts.length\n      },\n      updateQuery: (previousResult, {\n        fetchMoreResult\n      }) => {\n        if (!fetchMoreResult) {\n          return previousResult;\n        }\n\n        return _Object$assign({}, previousResult, {\n          // Append the new posts results to the old one\n          allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n        });\n      }\n    });\n  };\n\n  if (error) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"error msg\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Loading\");\n  const {\n    allPosts,\n    _allPostsMeta\n  } = data;\n  const areMorePosts = allPosts.length < _allPostsMeta.count;\n  return __jsx(\"section\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, allPosts.map((post, index) => __jsx(\"li\", {\n    key: post.id,\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, index + 1, \". \"), __jsx(\"a\", {\n    href: post.url,\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, post.title))))), areMorePosts && __jsx(\"button\", {\n    onClick: () => loadMorePosts(),\n    disabled: loadingMorePosts,\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, loadingMorePosts ? 'Loading...' : 'Show More'), __jsx(_JSXStyle, {\n    id: \"1458778202\",\n    __self: this\n  }, \"section.jsx-1458778202{padding-bottom:20px;}li.jsx-1458778202{display:block;margin-bottom:10px;}div.jsx-1458778202{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}a.jsx-1458778202{font-size:14px;margin-right:10px;-webkit-text-decoration:none;text-decoration:none;padding-bottom:0;border:0;}span.jsx-1458778202{font-size:14px;margin-right:5px;}ul.jsx-1458778202{margin:0;padding:0;}button.jsx-1458778202:before{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;border-style:solid;border-width:6px 4px 0 4px;border-color:#ffffff transparent transparent transparent;content:'';height:0;margin-right:5px;width:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYW1wZXJvdWdlL2NvZGUvTGFtcGVyb3lnZS9yZWFjdC1uZXh0LWdvYWxzL2NsaWVudC9jb21wb25lbnRzL1Bvc3RzL0xpc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0V3QixBQUcrQixBQUdOLEFBSUssQUFJSixBQU9BLEFBSU4sQUFJUyxTQUhSLEtBbkJTLENBUUQsQUFPRCxJQUtuQixDQXZCQSxZQW1CQSxDQWZBLEFBUXVCLHNDQWNGLFlBYkYsT0FjVSxHQXBCZCxPQU9KLFNBQ1gsUUFhMkQsa0RBcEIzRCxPQXFCYSxXQUNGLFNBQ1EsaUJBQ1QsUUFDViIsImZpbGUiOiIvVXNlcnMvbGFtcGVyb3VnZS9jb2RlL0xhbXBlcm95Z2UvcmVhY3QtbmV4dC1nb2Fscy9jbGllbnQvY29tcG9uZW50cy9Qb3N0cy9MaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdxbCBmcm9tIFwiZ3JhcGhxbC10YWdcIjtcbmltcG9ydCBMaW5rIGZyb20gXCJuZXh0L2xpbmtcIjtcbmltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSAnQGFwb2xsby9yZWFjdC1ob29rcydcbmltcG9ydCB7IE5ldHdvcmtTdGF0dXMgfSBmcm9tICdhcG9sbG8tYm9vc3QnXG5pbXBvcnQgeyBncmFwaHFsIH0gZnJvbSBcInJlYWN0LWFwb2xsb1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuXG5jb25zdCBBTExfUE9TVFNfUVVFUlkgPSBncWwgYHtcbiAgICBwb3N0cyB7XG4gICAgICAgIGlkXG4gICAgICAgIG5hbWVcbiAgICAgICAgZGVzY3JpcHRpb25cbiAgICAgICAgaW1hZ2Uge1xuICAgICAgICAgICAgdXJsXG4gICAgICAgIH1cbiAgICB9XG59YDtcblxuXG5leHBvcnQgY29uc3QgYWxsUG9zdHNRdWVyeVZhcnMgPSB7XG4gICAgc2tpcDogMCxcbiAgICBmaXJzdDogMTBcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBvc3RMaXN0ICgpIHtcbiAgICBjb25zdCB7IGxvYWRpbmcsIGVycm9yLCBkYXRhLCBmZXRjaE1vcmUsIG5ldHdvcmtTdGF0dXMgfSA9IHVzZVF1ZXJ5KFxuICAgICAgICBBTExfUE9TVFNfUVVFUlksXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhcmlhYmxlczogYWxsUG9zdHNRdWVyeVZhcnMsXG4gICAgICAgICAgICAvLyBTZXR0aW5nIHRoaXMgdmFsdWUgdG8gdHJ1ZSB3aWxsIG1ha2UgdGhlIGNvbXBvbmVudCByZXJlbmRlciB3aGVuXG4gICAgICAgICAgICAvLyB0aGUgXCJuZXR3b3JrU3RhdHVzXCIgY2hhbmdlcywgc28gd2UgYXJlIGFibGUgdG8ga25vdyBpZiBpdCBpcyBmZXRjaGluZ1xuICAgICAgICAgICAgLy8gbW9yZSBkYXRhXG4gICAgICAgICAgICBub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2U6IHRydWVcbiAgICAgICAgfVxuICAgIClcblxuICAgIGNvbnN0IGxvYWRpbmdNb3JlUG9zdHMgPSBuZXR3b3JrU3RhdHVzID09PSBOZXR3b3JrU3RhdHVzLmZldGNoTW9yZVxuXG4gICAgY29uc3QgbG9hZE1vcmVQb3N0cyA9ICgpID0+IHtcbiAgICAgICAgZmV0Y2hNb3JlKHtcbiAgICAgICAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICAgICAgICAgIHNraXA6IGFsbFBvc3RzLmxlbmd0aFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVwZGF0ZVF1ZXJ5OiAocHJldmlvdXNSZXN1bHQsIHsgZmV0Y2hNb3JlUmVzdWx0IH0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWZldGNoTW9yZVJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNSZXN1bHRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZpb3VzUmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCB0aGUgbmV3IHBvc3RzIHJlc3VsdHMgdG8gdGhlIG9sZCBvbmVcbiAgICAgICAgICAgICAgICAgICAgYWxsUG9zdHM6IFsuLi5wcmV2aW91c1Jlc3VsdC5hbGxQb3N0cywgLi4uZmV0Y2hNb3JlUmVzdWx0LmFsbFBvc3RzXVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKGVycm9yKSByZXR1cm4gPGRpdj5lcnJvciBtc2c8L2Rpdj5cbiAgICBpZiAobG9hZGluZyAmJiAhbG9hZGluZ01vcmVQb3N0cykgcmV0dXJuIDxkaXY+TG9hZGluZzwvZGl2PlxuXG4gICAgY29uc3QgeyBhbGxQb3N0cywgX2FsbFBvc3RzTWV0YSB9ID0gZGF0YTtcbiAgICBjb25zdCBhcmVNb3JlUG9zdHMgPSBhbGxQb3N0cy5sZW5ndGggPCBfYWxsUG9zdHNNZXRhLmNvdW50XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICB7YWxsUG9zdHMubWFwKChwb3N0LCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtwb3N0LmlkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2luZGV4ICsgMX0uIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtwb3N0LnVybH0+e3Bvc3QudGl0bGV9PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAge2FyZU1vcmVQb3N0cyAmJiAoXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBsb2FkTW9yZVBvc3RzKCl9IGRpc2FibGVkPXtsb2FkaW5nTW9yZVBvc3RzfT5cbiAgICAgICAgICAgICAgICAgICAge2xvYWRpbmdNb3JlUG9zdHMgPyAnTG9hZGluZy4uLicgOiAnU2hvdyBNb3JlJ31cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIHNlY3Rpb24ge1xuICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xuICAgICAgICB9XG4gICAgICAgIGxpIHtcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICB9XG4gICAgICAgIGRpdiB7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICB9XG4gICAgICAgIGEge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAwO1xuICAgICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgfVxuICAgICAgICBzcGFuIHtcbiAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICAgIH1cbiAgICAgICAgdWwge1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpiZWZvcmUge1xuICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgICAgICAgIGJvcmRlci13aWR0aDogNnB4IDRweCAwIDRweDtcbiAgICAgICAgICBib3JkZXItY29sb3I6ICNmZmZmZmYgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgaGVpZ2h0OiAwO1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgICAgIHdpZHRoOiAwO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICApXG59XG4iXX0= */\\n/*@ sourceURL=/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js */\"));\n}","map":{"version":3,"sources":["/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js"],"names":["gql","Link","useQuery","NetworkStatus","graphql","React","ALL_POSTS_QUERY","allPostsQueryVars","skip","first","PostList","loading","error","data","fetchMore","networkStatus","variables","notifyOnNetworkStatusChange","loadingMorePosts","loadMorePosts","allPosts","length","updateQuery","previousResult","fetchMoreResult","_allPostsMeta","areMorePosts","count","map","post","index","id","url","title"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,MAAMC,eAAe,GAAGN,GAAK;;;;;;;;;EAA7B;AAYA,OAAO,MAAMO,iBAAiB,GAAG;AAC7BC,EAAAA,IAAI,EAAE,CADuB;AAE7BC,EAAAA,KAAK,EAAE;AAFsB,CAA1B;AAKP,eAAe,SAASC,QAAT,GAAqB;AAChC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAAqDb,QAAQ,CAC/DI,eAD+D,EAE/D;AACIU,IAAAA,SAAS,EAAET,iBADf;AAEI;AACA;AACA;AACAU,IAAAA,2BAA2B,EAAE;AALjC,GAF+D,CAAnE;AAWA,QAAMC,gBAAgB,GAAGH,aAAa,KAAKZ,aAAa,CAACW,SAAzD;;AAEA,QAAMK,aAAa,GAAG,MAAM;AACxBL,IAAAA,SAAS,CAAC;AACNE,MAAAA,SAAS,EAAE;AACPR,QAAAA,IAAI,EAAEY,QAAQ,CAACC;AADR,OADL;AAINC,MAAAA,WAAW,EAAE,CAACC,cAAD,EAAiB;AAAEC,QAAAA;AAAF,OAAjB,KAAyC;AAClD,YAAI,CAACA,eAAL,EAAsB;AAClB,iBAAOD,cAAP;AACH;;AACD,eAAO,eAAc,EAAd,EAAkBA,cAAlB,EAAkC;AACrC;AACAH,UAAAA,QAAQ,EAAE,CAAC,GAAGG,cAAc,CAACH,QAAnB,EAA6B,GAAGI,eAAe,CAACJ,QAAhD;AAF2B,SAAlC,CAAP;AAIH;AAZK,KAAD,CAAT;AAcH,GAfD;;AAiBA,MAAIR,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACX,MAAID,OAAO,IAAI,CAACO,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAElC,QAAM;AAAEE,IAAAA,QAAF;AAAYK,IAAAA;AAAZ,MAA8BZ,IAApC;AACA,QAAMa,YAAY,GAAGN,QAAQ,CAACC,MAAT,GAAkBI,aAAa,CAACE,KAArD;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,QAAQ,CAACQ,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KACV;AAAI,IAAA,GAAG,EAAED,IAAI,CAACE,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOD,KAAK,GAAG,CAAf,OADJ,EAEI;AAAG,IAAA,IAAI,EAAED,IAAI,CAACG,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBH,IAAI,CAACI,KAAzB,CAFJ,CADJ,CADH,CADL,CADJ,EAWKP,YAAY,IACT;AAAQ,IAAA,OAAO,EAAE,MAAMP,aAAa,EAApC;AAAwC,IAAA,QAAQ,EAAED,gBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,gBAAgB,GAAG,YAAH,GAAkB,WADvC,CAZR;AAAA;AAAA;AAAA,i0LADJ;AAyDH","sourcesContent":["import gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { useQuery } from '@apollo/react-hooks'\nimport { NetworkStatus } from 'apollo-boost'\nimport { graphql } from \"react-apollo\";\nimport React from 'react';\n\n\nconst ALL_POSTS_QUERY = gql `{\n    posts {\n        id\n        name\n        description\n        image {\n            url\n        }\n    }\n}`;\n\n\nexport const allPostsQueryVars = {\n    skip: 0,\n    first: 10\n};\n\nexport default function PostList () {\n    const { loading, error, data, fetchMore, networkStatus } = useQuery(\n        ALL_POSTS_QUERY,\n        {\n            variables: allPostsQueryVars,\n            // Setting this value to true will make the component rerender when\n            // the \"networkStatus\" changes, so we are able to know if it is fetching\n            // more data\n            notifyOnNetworkStatusChange: true\n        }\n    )\n\n    const loadingMorePosts = networkStatus === NetworkStatus.fetchMore\n\n    const loadMorePosts = () => {\n        fetchMore({\n            variables: {\n                skip: allPosts.length\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n                if (!fetchMoreResult) {\n                    return previousResult\n                }\n                return Object.assign({}, previousResult, {\n                    // Append the new posts results to the old one\n                    allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n                })\n            }\n        })\n    }\n\n    if (error) return <div>error msg</div>\n    if (loading && !loadingMorePosts) return <div>Loading</div>\n\n    const { allPosts, _allPostsMeta } = data;\n    const areMorePosts = allPosts.length < _allPostsMeta.count\n\n    return (\n        <section>\n            <ul>\n                {allPosts.map((post, index) => (\n                    <li key={post.id}>\n                        <div>\n                            <span>{index + 1}. </span>\n                            <a href={post.url}>{post.title}</a>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n            {areMorePosts && (\n                <button onClick={() => loadMorePosts()} disabled={loadingMorePosts}>\n                    {loadingMorePosts ? 'Loading...' : 'Show More'}\n                </button>\n            )}\n            <style jsx>{`\n        section {\n          padding-bottom: 20px;\n        }\n        li {\n          display: block;\n          margin-bottom: 10px;\n        }\n        div {\n          align-items: center;\n          display: flex;\n        }\n        a {\n          font-size: 14px;\n          margin-right: 10px;\n          text-decoration: none;\n          padding-bottom: 0;\n          border: 0;\n        }\n        span {\n          font-size: 14px;\n          margin-right: 5px;\n        }\n        ul {\n          margin: 0;\n          padding: 0;\n        }\n        button:before {\n          align-self: center;\n          border-style: solid;\n          border-width: 6px 4px 0 4px;\n          border-color: #ffffff transparent transparent transparent;\n          content: '';\n          height: 0;\n          margin-right: 5px;\n          width: 0;\n        }\n      `}</style>\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}