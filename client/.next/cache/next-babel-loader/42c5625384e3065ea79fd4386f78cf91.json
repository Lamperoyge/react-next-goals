{"ast":null,"code":"var _jsxFileName = \"/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js\";\nvar __jsx = React.createElement;\nimport gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { graphql } from \"react-apollo\";\nimport React from 'react';\n\nconst Posts = ({\n  data: {\n    loading,\n    error,\n    posts\n  },\n  search\n}, req) => {\n  if (error) return 'Error loading posts';\n\n  if (posts && posts.length) {\n    const searchQuery = posts.filter(query => {\n      query.name.toLowerCase().includes(search);\n    });\n\n    if (searchQuery.length) {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, searchQuery.map((el, idx) => {\n        return __jsx(\"div\", {\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, el.name), __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, el.id), __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, el.description));\n      }));\n    }\n  }\n};\n\nconst query = gql`{\n    posts {\n        id\n        name\n        description\n        image {\n            url\n        }\n    }\n}`;\nexport default graphql(query, {\n  props: ({\n    data\n  }) => ({\n    data\n  })\n})(Posts);","map":{"version":3,"sources":["/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js"],"names":["gql","Link","graphql","React","Posts","data","loading","error","posts","search","req","length","searchQuery","filter","query","name","toLowerCase","includes","map","el","idx","id","description","props"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,KAAK,GAAG,CACV;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAR;AAAmCC,EAAAA;AAAnC,CADU,EAEVC,GAFU,KAGT;AACD,MAAGH,KAAH,EAAU,OAAO,qBAAP;;AACV,MAAGC,KAAK,IAAIA,KAAK,CAACG,MAAlB,EAA0B;AACtB,UAAMC,WAAW,GAAGJ,KAAK,CAACK,MAAN,CAAaC,KAAK,IAAI;AACtCA,MAAAA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCR,MAAlC;AACH,KAFmB,CAApB;;AAIA,QAAGG,WAAW,CAACD,MAAf,EAAuB;AACnB,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQC,WAAW,CAACM,GAAZ,CAAgB,CAACC,EAAD,EAAKC,GAAL,KAAa;AAC3B,eACI;AAAK,UAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKD,EAAE,CAACJ,IADR,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKI,EAAE,CAACE,EADR,CAJJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKF,EAAE,CAACG,WADR,CAPJ,CADJ;AAaD,OAdD,CAFR,CADJ;AAqBH;AACJ;AACJ,CAlCD;;AAqCA,MAAMR,KAAK,GAAGd,GAAK;;;;;;;;;EAAnB;AAYA,eAAeE,OAAO,CAACY,KAAD,EAAQ;AAC1BS,EAAAA,KAAK,EAAE,CAAC;AAAElB,IAAAA;AAAF,GAAD,MAAe;AAClBA,IAAAA;AADkB,GAAf;AADmB,CAAR,CAAP,CAIZD,KAJY,CAAf","sourcesContent":["import gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { graphql } from \"react-apollo\";\nimport React from 'react';\n\n\nconst Posts = (\n    { data: { loading, error, posts }, search },\n    req\n) => {\n    if(error) return 'Error loading posts';\n    if(posts && posts.length) {\n        const searchQuery = posts.filter(query => {\n            query.name.toLowerCase().includes(search)\n        });\n\n        if(searchQuery.length) {\n            return (\n                <div>\n                    {\n                        searchQuery.map((el, idx) => {\n                          return (\n                              <div key={idx}>\n                                  <div>\n                                      {el.name}\n                                  </div>\n                                  <div>\n                                      {el.id}\n                                  </div>\n                                  <div>\n                                      {el.description}\n                                  </div>\n                              </div>\n                          )\n                        })\n                    }\n                </div>\n            )\n        }\n    }\n};\n\n\nconst query = gql `{\n    posts {\n        id\n        name\n        description\n        image {\n            url\n        }\n    }\n}`;\n\n\nexport default graphql(query, {\n    props: ({ data }) => ({\n        data\n    })\n})(Posts);\n"]},"metadata":{},"sourceType":"module"}