{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"{\\n    posts {\\n        id\\n        name\\n        description\\n        image {\\n            url\\n        }\\n    }\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { graphql } from \"react-apollo\";\nimport React from 'react';\n\nvar Posts = function Posts(_ref, req) {\n  var _ref$data = _ref.data,\n      loading = _ref$data.loading,\n      error = _ref$data.error,\n      posts = _ref$data.posts,\n      search = _ref.search;\n  if (error) return 'Error loading posts';\n\n  if (posts && posts.length) {\n    var searchQuery = posts.filter(function (query) {\n      query.name.toLowerCase().includes(search);\n    });\n\n    if (searchQuery.length) {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, searchQuery.map(function (el, idx) {\n        return __jsx(\"div\", {\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, el.name), __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, el.id), __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, el.description));\n      }));\n    }\n  }\n};\n\nvar query = gql(_templateObject());\nPosts.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var res, json;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch('https://api.github.com/repos/zeit/next.js');\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return res.json();\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", {\n            stars: json.stargazers_count\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default graphql(query, {\n  props: function props(_ref3) {\n    var data = _ref3.data;\n    return {\n      data: data\n    };\n  }\n})(Posts);","map":{"version":3,"sources":["/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js"],"names":["gql","Link","graphql","React","Posts","req","data","loading","error","posts","search","length","searchQuery","filter","query","name","toLowerCase","includes","map","el","idx","id","description","getInitialProps","fetch","res","json","stars","stargazers_count","props"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAEVC,GAFU,EAGT;AAAA,uBAFCC,IAED;AAAA,MAFSC,OAET,aAFSA,OAET;AAAA,MAFkBC,KAElB,aAFkBA,KAElB;AAAA,MAFyBC,KAEzB,aAFyBA,KAEzB;AAAA,MAFkCC,MAElC,QAFkCA,MAElC;AACD,MAAGF,KAAH,EAAU,OAAO,qBAAP;;AACV,MAAGC,KAAK,IAAIA,KAAK,CAACE,MAAlB,EAA0B;AACtB,QAAMC,WAAW,GAAGH,KAAK,CAACI,MAAN,CAAa,UAAAC,KAAK,EAAI;AACtCA,MAAAA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCP,MAAlC;AACH,KAFmB,CAApB;;AAIA,QAAGE,WAAW,CAACD,MAAf,EAAuB;AACnB,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQC,WAAW,CAACM,GAAZ,CAAgB,UAACC,EAAD,EAAKC,GAAL,EAAa;AAC3B,eACI;AAAK,UAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKD,EAAE,CAACJ,IADR,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKI,EAAE,CAACE,EADR,CAJJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKF,EAAE,CAACG,WADR,CAPJ,CADJ;AAaD,OAdD,CAFR,CADJ;AAqBH;AACJ;AACJ,CAlCD;;AAqCA,IAAMR,KAAK,GAAGd,GAAH,mBAAX;AAWAI,KAAK,CAACmB,eAAN;AAAA;AAAA;AAAA;AAAA,yBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACFC,KAAK,CAAC,2CAAD,CADH;;AAAA;AACdC,UAAAA,GADc;AAAA;AAAA,iBAEDA,GAAG,CAACC,IAAJ,EAFC;;AAAA;AAEdA,UAAAA,IAFc;AAAA,2CAGb;AAAEC,YAAAA,KAAK,EAAED,IAAI,CAACE;AAAd,WAHa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAMA,eAAe1B,OAAO,CAACY,KAAD,EAAQ;AAC1Be,EAAAA,KAAK,EAAE;AAAA,QAAGvB,IAAH,SAAGA,IAAH;AAAA,WAAe;AAClBA,MAAAA,IAAI,EAAJA;AADkB,KAAf;AAAA;AADmB,CAAR,CAAP,CAIZF,KAJY,CAAf","sourcesContent":["import gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { graphql } from \"react-apollo\";\nimport React from 'react';\n\n\nconst Posts = (\n    { data: { loading, error, posts }, search },\n    req\n) => {\n    if(error) return 'Error loading posts';\n    if(posts && posts.length) {\n        const searchQuery = posts.filter(query => {\n            query.name.toLowerCase().includes(search)\n        });\n\n        if(searchQuery.length) {\n            return (\n                <div>\n                    {\n                        searchQuery.map((el, idx) => {\n                          return (\n                              <div key={idx}>\n                                  <div>\n                                      {el.name}\n                                  </div>\n                                  <div>\n                                      {el.id}\n                                  </div>\n                                  <div>\n                                      {el.description}\n                                  </div>\n                              </div>\n                          )\n                        })\n                    }\n                </div>\n            )\n        }\n    }\n};\n\n\nconst query = gql `{\n    posts {\n        id\n        name\n        description\n        image {\n            url\n        }\n    }\n}`;\n\nPosts.getInitialProps = async () => {\n    const res = await fetch('https://api.github.com/repos/zeit/next.js');\n    const json = await res.json();\n    return { stars: json.stargazers_count }\n};\n\nexport default graphql(query, {\n    props: ({ data }) => ({\n        data\n    })\n})(Posts);\n"]},"metadata":{},"sourceType":"module"}