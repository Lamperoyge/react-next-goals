{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"{\\n    posts {\\n        id\\n        name\\n        description\\n        image {\\n            url\\n        }\\n    }\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { NetworkStatus } from 'apollo-boost';\nimport { graphql } from \"react-apollo\";\nimport React from 'react';\nvar ALL_POSTS_QUERY = graphql(_templateObject());\nexport var allPostsQueryVars = {\n  skip: 0,\n  first: 10\n};\nexport default function PostList() {\n  var _useQuery = useQuery(ALL_POSTS_QUERY, {\n    variables: allPostsQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var loadMorePosts = function loadMorePosts() {\n    fetchMore({\n      variables: {\n        skip: allPosts.length\n      },\n      updateQuery: function updateQuery(previousResult, _ref) {\n        var fetchMoreResult = _ref.fetchMoreResult;\n\n        if (!fetchMoreResult) {\n          return previousResult;\n        }\n\n        return _Object$assign({}, previousResult, {\n          // Append the new posts results to the old one\n          allPosts: [].concat(_toConsumableArray(previousResult.allPosts), _toConsumableArray(fetchMoreResult.allPosts))\n        });\n      }\n    });\n  };\n\n  if (error) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"error msg\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Loading\");\n  var allPosts = data.allPosts,\n      _allPostsMeta = data._allPostsMeta;\n  var areMorePosts = allPosts.length < _allPostsMeta.count;\n  return __jsx(\"section\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, allPosts.map(function (post, index) {\n    return __jsx(\"li\", {\n      key: post.id,\n      className: \"jsx-1458778202\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"jsx-1458778202\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"jsx-1458778202\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, index + 1, \". \"), __jsx(\"a\", {\n      href: post.url,\n      className: \"jsx-1458778202\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, post.title)));\n  })), areMorePosts && __jsx(\"button\", {\n    onClick: function onClick() {\n      return loadMorePosts();\n    },\n    disabled: loadingMorePosts,\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, loadingMorePosts ? 'Loading...' : 'Show More'), __jsx(_JSXStyle, {\n    id: \"1458778202\",\n    __self: this\n  }, \"section.jsx-1458778202{padding-bottom:20px;}li.jsx-1458778202{display:block;margin-bottom:10px;}div.jsx-1458778202{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}a.jsx-1458778202{font-size:14px;margin-right:10px;-webkit-text-decoration:none;text-decoration:none;padding-bottom:0;border:0;}span.jsx-1458778202{font-size:14px;margin-right:5px;}ul.jsx-1458778202{margin:0;padding:0;}button.jsx-1458778202:before{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;border-style:solid;border-width:6px 4px 0 4px;border-color:#ffffff transparent transparent transparent;content:'';height:0;margin-right:5px;width:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYW1wZXJvdWdlL2NvZGUvTGFtcGVyb3lnZS9yZWFjdC1uZXh0LWdvYWxzL2NsaWVudC9jb21wb25lbnRzL1Bvc3RzL0xpc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0V3QixBQUcrQixBQUdOLEFBSUssQUFJSixBQU9BLEFBSU4sQUFJUyxTQUhSLEtBbkJTLENBUUQsQUFPRCxJQUtuQixDQXZCQSxZQW1CQSxDQWZBLEFBUXVCLHNDQWNGLFlBYkYsT0FjVSxHQXBCZCxPQU9KLFNBQ1gsUUFhMkQsa0RBcEIzRCxPQXFCYSxXQUNGLFNBQ1EsaUJBQ1QsUUFDViIsImZpbGUiOiIvVXNlcnMvbGFtcGVyb3VnZS9jb2RlL0xhbXBlcm95Z2UvcmVhY3QtbmV4dC1nb2Fscy9jbGllbnQvY29tcG9uZW50cy9Qb3N0cy9MaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdxbCBmcm9tIFwiZ3JhcGhxbC10YWdcIjtcbmltcG9ydCBMaW5rIGZyb20gXCJuZXh0L2xpbmtcIjtcbmltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSAnQGFwb2xsby9yZWFjdC1ob29rcydcbmltcG9ydCB7IE5ldHdvcmtTdGF0dXMgfSBmcm9tICdhcG9sbG8tYm9vc3QnXG5pbXBvcnQgeyBncmFwaHFsIH0gZnJvbSBcInJlYWN0LWFwb2xsb1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuXG5jb25zdCBBTExfUE9TVFNfUVVFUlkgPSBncmFwaHFsIGB7XG4gICAgcG9zdHMge1xuICAgICAgICBpZFxuICAgICAgICBuYW1lXG4gICAgICAgIGRlc2NyaXB0aW9uXG4gICAgICAgIGltYWdlIHtcbiAgICAgICAgICAgIHVybFxuICAgICAgICB9XG4gICAgfVxufWA7XG5cblxuZXhwb3J0IGNvbnN0IGFsbFBvc3RzUXVlcnlWYXJzID0ge1xuICAgIHNraXA6IDAsXG4gICAgZmlyc3Q6IDEwXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQb3N0TGlzdCAoKSB7XG4gICAgY29uc3QgeyBsb2FkaW5nLCBlcnJvciwgZGF0YSwgZmV0Y2hNb3JlLCBuZXR3b3JrU3RhdHVzIH0gPSB1c2VRdWVyeShcbiAgICAgICAgQUxMX1BPU1RTX1FVRVJZLFxuICAgICAgICB7XG4gICAgICAgICAgICB2YXJpYWJsZXM6IGFsbFBvc3RzUXVlcnlWYXJzLFxuICAgICAgICAgICAgLy8gU2V0dGluZyB0aGlzIHZhbHVlIHRvIHRydWUgd2lsbCBtYWtlIHRoZSBjb21wb25lbnQgcmVyZW5kZXIgd2hlblxuICAgICAgICAgICAgLy8gdGhlIFwibmV0d29ya1N0YXR1c1wiIGNoYW5nZXMsIHNvIHdlIGFyZSBhYmxlIHRvIGtub3cgaWYgaXQgaXMgZmV0Y2hpbmdcbiAgICAgICAgICAgIC8vIG1vcmUgZGF0YVxuICAgICAgICAgICAgbm90aWZ5T25OZXR3b3JrU3RhdHVzQ2hhbmdlOiB0cnVlXG4gICAgICAgIH1cbiAgICApXG5cbiAgICBjb25zdCBsb2FkaW5nTW9yZVBvc3RzID0gbmV0d29ya1N0YXR1cyA9PT0gTmV0d29ya1N0YXR1cy5mZXRjaE1vcmVcblxuICAgIGNvbnN0IGxvYWRNb3JlUG9zdHMgPSAoKSA9PiB7XG4gICAgICAgIGZldGNoTW9yZSh7XG4gICAgICAgICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgICAgICAgICBza2lwOiBhbGxQb3N0cy5sZW5ndGhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cGRhdGVRdWVyeTogKHByZXZpb3VzUmVzdWx0LCB7IGZldGNoTW9yZVJlc3VsdCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFmZXRjaE1vcmVSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzUmVzdWx0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2aW91c1Jlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdGhlIG5ldyBwb3N0cyByZXN1bHRzIHRvIHRoZSBvbGQgb25lXG4gICAgICAgICAgICAgICAgICAgIGFsbFBvc3RzOiBbLi4ucHJldmlvdXNSZXN1bHQuYWxsUG9zdHMsIC4uLmZldGNoTW9yZVJlc3VsdC5hbGxQb3N0c11cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGlmIChlcnJvcikgcmV0dXJuIDxkaXY+ZXJyb3IgbXNnPC9kaXY+XG4gICAgaWYgKGxvYWRpbmcgJiYgIWxvYWRpbmdNb3JlUG9zdHMpIHJldHVybiA8ZGl2PkxvYWRpbmc8L2Rpdj5cblxuICAgIGNvbnN0IHsgYWxsUG9zdHMsIF9hbGxQb3N0c01ldGEgfSA9IGRhdGE7XG4gICAgY29uc3QgYXJlTW9yZVBvc3RzID0gYWxsUG9zdHMubGVuZ3RoIDwgX2FsbFBvc3RzTWV0YS5jb3VudFxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAge2FsbFBvc3RzLm1hcCgocG9zdCwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17cG9zdC5pZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPntpbmRleCArIDF9LiA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17cG9zdC51cmx9Pntwb3N0LnRpdGxlfTwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIHthcmVNb3JlUG9zdHMgJiYgKFxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gbG9hZE1vcmVQb3N0cygpfSBkaXNhYmxlZD17bG9hZGluZ01vcmVQb3N0c30+XG4gICAgICAgICAgICAgICAgICAgIHtsb2FkaW5nTW9yZVBvc3RzID8gJ0xvYWRpbmcuLi4nIDogJ1Nob3cgTW9yZSd9XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICBzZWN0aW9uIHtcbiAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMjBweDtcbiAgICAgICAgfVxuICAgICAgICBsaSB7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgfVxuICAgICAgICBkaXYge1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgfVxuICAgICAgICBhIHtcbiAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMDtcbiAgICAgICAgICBib3JkZXI6IDA7XG4gICAgICAgIH1cbiAgICAgICAgc3BhbiB7XG4gICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgICB9XG4gICAgICAgIHVsIHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246YmVmb3JlIHtcbiAgICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICAgICAgICBib3JkZXItd2lkdGg6IDZweCA0cHggMCA0cHg7XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiAjZmZmZmZmIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgIGhlaWdodDogMDtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgKVxufVxuIl19 */\\n/*@ sourceURL=/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js */\"));\n}","map":{"version":3,"sources":["/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js"],"names":["gql","Link","useQuery","NetworkStatus","graphql","React","ALL_POSTS_QUERY","allPostsQueryVars","skip","first","PostList","variables","notifyOnNetworkStatusChange","loading","error","data","fetchMore","networkStatus","loadingMorePosts","loadMorePosts","allPosts","length","updateQuery","previousResult","fetchMoreResult","_allPostsMeta","areMorePosts","count","map","post","index","id","url","title"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,IAAMC,eAAe,GAAGF,OAAH,mBAArB;AAYA,OAAO,IAAMG,iBAAiB,GAAG;AAC7BC,EAAAA,IAAI,EAAE,CADuB;AAE7BC,EAAAA,KAAK,EAAE;AAFsB,CAA1B;AAKP,eAAe,SAASC,QAAT,GAAqB;AAAA,kBAC2BR,QAAQ,CAC/DI,eAD+D,EAE/D;AACIK,IAAAA,SAAS,EAAEJ,iBADf;AAEI;AACA;AACA;AACAK,IAAAA,2BAA2B,EAAE;AALjC,GAF+D,CADnC;AAAA,MACxBC,OADwB,aACxBA,OADwB;AAAA,MACfC,KADe,aACfA,KADe;AAAA,MACRC,IADQ,aACRA,IADQ;AAAA,MACFC,SADE,aACFA,SADE;AAAA,MACSC,aADT,aACSA,aADT;;AAYhC,MAAMC,gBAAgB,GAAGD,aAAa,KAAKd,aAAa,CAACa,SAAzD;;AAEA,MAAMG,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBH,IAAAA,SAAS,CAAC;AACNL,MAAAA,SAAS,EAAE;AACPH,QAAAA,IAAI,EAAEY,QAAQ,CAACC;AADR,OADL;AAINC,MAAAA,WAAW,EAAE,qBAACC,cAAD,QAAyC;AAAA,YAAtBC,eAAsB,QAAtBA,eAAsB;;AAClD,YAAI,CAACA,eAAL,EAAsB;AAClB,iBAAOD,cAAP;AACH;;AACD,eAAO,eAAc,EAAd,EAAkBA,cAAlB,EAAkC;AACrC;AACAH,UAAAA,QAAQ,+BAAMG,cAAc,CAACH,QAArB,sBAAkCI,eAAe,CAACJ,QAAlD;AAF6B,SAAlC,CAAP;AAIH;AAZK,KAAD,CAAT;AAcH,GAfD;;AAiBA,MAAIN,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACX,MAAID,OAAO,IAAI,CAACK,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAhCF,MAkCxBE,QAlCwB,GAkCIL,IAlCJ,CAkCxBK,QAlCwB;AAAA,MAkCdK,aAlCc,GAkCIV,IAlCJ,CAkCdU,aAlCc;AAmChC,MAAMC,YAAY,GAAGN,QAAQ,CAACC,MAAT,GAAkBI,aAAa,CAACE,KAArD;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,QAAQ,CAACQ,GAAT,CAAa,UAACC,IAAD,EAAOC,KAAP;AAAA,WACV;AAAI,MAAA,GAAG,EAAED,IAAI,CAACE,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOD,KAAK,GAAG,CAAf,OADJ,EAEI;AAAG,MAAA,IAAI,EAAED,IAAI,CAACG,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoBH,IAAI,CAACI,KAAzB,CAFJ,CADJ,CADU;AAAA,GAAb,CADL,CADJ,EAWKP,YAAY,IACT;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMP,aAAa,EAAnB;AAAA,KAAjB;AAAwC,IAAA,QAAQ,EAAED,gBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,gBAAgB,GAAG,YAAH,GAAkB,WADvC,CAZR;AAAA;AAAA;AAAA,q0LADJ;AAyDH","sourcesContent":["import gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { useQuery } from '@apollo/react-hooks'\nimport { NetworkStatus } from 'apollo-boost'\nimport { graphql } from \"react-apollo\";\nimport React from 'react';\n\n\nconst ALL_POSTS_QUERY = graphql `{\n    posts {\n        id\n        name\n        description\n        image {\n            url\n        }\n    }\n}`;\n\n\nexport const allPostsQueryVars = {\n    skip: 0,\n    first: 10\n};\n\nexport default function PostList () {\n    const { loading, error, data, fetchMore, networkStatus } = useQuery(\n        ALL_POSTS_QUERY,\n        {\n            variables: allPostsQueryVars,\n            // Setting this value to true will make the component rerender when\n            // the \"networkStatus\" changes, so we are able to know if it is fetching\n            // more data\n            notifyOnNetworkStatusChange: true\n        }\n    )\n\n    const loadingMorePosts = networkStatus === NetworkStatus.fetchMore\n\n    const loadMorePosts = () => {\n        fetchMore({\n            variables: {\n                skip: allPosts.length\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n                if (!fetchMoreResult) {\n                    return previousResult\n                }\n                return Object.assign({}, previousResult, {\n                    // Append the new posts results to the old one\n                    allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n                })\n            }\n        })\n    }\n\n    if (error) return <div>error msg</div>\n    if (loading && !loadingMorePosts) return <div>Loading</div>\n\n    const { allPosts, _allPostsMeta } = data;\n    const areMorePosts = allPosts.length < _allPostsMeta.count\n\n    return (\n        <section>\n            <ul>\n                {allPosts.map((post, index) => (\n                    <li key={post.id}>\n                        <div>\n                            <span>{index + 1}. </span>\n                            <a href={post.url}>{post.title}</a>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n            {areMorePosts && (\n                <button onClick={() => loadMorePosts()} disabled={loadingMorePosts}>\n                    {loadingMorePosts ? 'Loading...' : 'Show More'}\n                </button>\n            )}\n            <style jsx>{`\n        section {\n          padding-bottom: 20px;\n        }\n        li {\n          display: block;\n          margin-bottom: 10px;\n        }\n        div {\n          align-items: center;\n          display: flex;\n        }\n        a {\n          font-size: 14px;\n          margin-right: 10px;\n          text-decoration: none;\n          padding-bottom: 0;\n          border: 0;\n        }\n        span {\n          font-size: 14px;\n          margin-right: 5px;\n        }\n        ul {\n          margin: 0;\n          padding: 0;\n        }\n        button:before {\n          align-self: center;\n          border-style: solid;\n          border-width: 6px 4px 0 4px;\n          border-color: #ffffff transparent transparent transparent;\n          content: '';\n          height: 0;\n          margin-right: 5px;\n          width: 0;\n        }\n      `}</style>\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}