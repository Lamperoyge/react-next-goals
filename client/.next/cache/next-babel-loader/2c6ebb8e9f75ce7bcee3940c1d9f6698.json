{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar _jsxFileName = \"/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { NetworkStatus } from 'apollo-boost';\nimport { graphql } from \"react-apollo\";\nimport React from 'react';\nexport const ALL_POSTS_QUERY = gql`\n  query allPosts($first: Int!, $skip: Int!) {\n    allPosts(orderBy: createdAt_DESC, first: $first, skip: $skip) {\n      id\n      name\n      description\n      image\n      createdAt\n    }\n    _allPostsMeta {\n      count\n    }\n  }\n`;\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: 10\n};\nexport default function PostList() {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(ALL_POSTS_QUERY, {\n    variables: allPostsQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: allPosts.length\n      },\n      updateQuery: (previousResult, {\n        fetchMoreResult\n      }) => {\n        if (!fetchMoreResult) {\n          return previousResult;\n        }\n\n        return _Object$assign({}, previousResult, {\n          // Append the new posts results to the old one\n          allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n        });\n      }\n    });\n  };\n\n  if (error) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"error msg\");\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Loading\");\n  const {\n    allPosts,\n    _allPostsMeta\n  } = data;\n  const areMorePosts = allPosts.length < _allPostsMeta.count;\n  return __jsx(\"section\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, allPosts.map((post, index) => __jsx(\"li\", {\n    key: post.id,\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, index + 1, \". \"), __jsx(\"a\", {\n    href: post.url,\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, post.title))))), areMorePosts && __jsx(\"button\", {\n    onClick: () => loadMorePosts(),\n    disabled: loadingMorePosts,\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, loadingMorePosts ? 'Loading...' : 'Show More'), __jsx(_JSXStyle, {\n    id: \"1458778202\",\n    __self: this\n  }, \"section.jsx-1458778202{padding-bottom:20px;}li.jsx-1458778202{display:block;margin-bottom:10px;}div.jsx-1458778202{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}a.jsx-1458778202{font-size:14px;margin-right:10px;-webkit-text-decoration:none;text-decoration:none;padding-bottom:0;border:0;}span.jsx-1458778202{font-size:14px;margin-right:5px;}ul.jsx-1458778202{margin:0;padding:0;}button.jsx-1458778202:before{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;border-style:solid;border-width:6px 4px 0 4px;border-color:#ffffff transparent transparent transparent;content:'';height:0;margin-right:5px;width:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYW1wZXJvdWdlL2NvZGUvTGFtcGVyb3lnZS9yZWFjdC1uZXh0LWdvYWxzL2NsaWVudC9jb21wb25lbnRzL1Bvc3RzL0xpc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUZ3QixBQUcrQixBQUdOLEFBSUssQUFJSixBQU9BLEFBSU4sQUFJUyxTQUhSLEtBbkJTLENBUUQsQUFPRCxJQUtuQixDQXZCQSxZQW1CQSxDQWZBLEFBUXVCLHNDQWNGLFlBYkYsT0FjVSxHQXBCZCxPQU9KLFNBQ1gsUUFhMkQsa0RBcEIzRCxPQXFCYSxXQUNGLFNBQ1EsaUJBQ1QsUUFDViIsImZpbGUiOiIvVXNlcnMvbGFtcGVyb3VnZS9jb2RlL0xhbXBlcm95Z2UvcmVhY3QtbmV4dC1nb2Fscy9jbGllbnQvY29tcG9uZW50cy9Qb3N0cy9MaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdxbCBmcm9tIFwiZ3JhcGhxbC10YWdcIjtcbmltcG9ydCBMaW5rIGZyb20gXCJuZXh0L2xpbmtcIjtcbmltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSAnQGFwb2xsby9yZWFjdC1ob29rcydcbmltcG9ydCB7IE5ldHdvcmtTdGF0dXMgfSBmcm9tICdhcG9sbG8tYm9vc3QnXG5pbXBvcnQgeyBncmFwaHFsIH0gZnJvbSBcInJlYWN0LWFwb2xsb1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuXG5leHBvcnQgY29uc3QgQUxMX1BPU1RTX1FVRVJZID0gZ3FsYFxuICBxdWVyeSBhbGxQb3N0cygkZmlyc3Q6IEludCEsICRza2lwOiBJbnQhKSB7XG4gICAgYWxsUG9zdHMob3JkZXJCeTogY3JlYXRlZEF0X0RFU0MsIGZpcnN0OiAkZmlyc3QsIHNraXA6ICRza2lwKSB7XG4gICAgICBpZFxuICAgICAgbmFtZVxuICAgICAgZGVzY3JpcHRpb25cbiAgICAgIGltYWdlXG4gICAgICBjcmVhdGVkQXRcbiAgICB9XG4gICAgX2FsbFBvc3RzTWV0YSB7XG4gICAgICBjb3VudFxuICAgIH1cbiAgfVxuYDtcbmV4cG9ydCBjb25zdCBhbGxQb3N0c1F1ZXJ5VmFycyA9IHtcbiAgICBza2lwOiAwLFxuICAgIGZpcnN0OiAxMFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUG9zdExpc3QgKCkge1xuICAgIGNvbnN0IHsgbG9hZGluZywgZXJyb3IsIGRhdGEsIGZldGNoTW9yZSwgbmV0d29ya1N0YXR1cyB9ID0gdXNlUXVlcnkoXG4gICAgICAgIEFMTF9QT1NUU19RVUVSWSxcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyaWFibGVzOiBhbGxQb3N0c1F1ZXJ5VmFycyxcbiAgICAgICAgICAgIC8vIFNldHRpbmcgdGhpcyB2YWx1ZSB0byB0cnVlIHdpbGwgbWFrZSB0aGUgY29tcG9uZW50IHJlcmVuZGVyIHdoZW5cbiAgICAgICAgICAgIC8vIHRoZSBcIm5ldHdvcmtTdGF0dXNcIiBjaGFuZ2VzLCBzbyB3ZSBhcmUgYWJsZSB0byBrbm93IGlmIGl0IGlzIGZldGNoaW5nXG4gICAgICAgICAgICAvLyBtb3JlIGRhdGFcbiAgICAgICAgICAgIG5vdGlmeU9uTmV0d29ya1N0YXR1c0NoYW5nZTogdHJ1ZVxuICAgICAgICB9XG4gICAgKVxuXG4gICAgY29uc3QgbG9hZGluZ01vcmVQb3N0cyA9IG5ldHdvcmtTdGF0dXMgPT09IE5ldHdvcmtTdGF0dXMuZmV0Y2hNb3JlXG5cbiAgICBjb25zdCBsb2FkTW9yZVBvc3RzID0gKCkgPT4ge1xuICAgICAgICBmZXRjaE1vcmUoe1xuICAgICAgICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgICAgICAgICAgc2tpcDogYWxsUG9zdHMubGVuZ3RoXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXBkYXRlUXVlcnk6IChwcmV2aW91c1Jlc3VsdCwgeyBmZXRjaE1vcmVSZXN1bHQgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZmV0Y2hNb3JlUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1Jlc3VsdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldmlvdXNSZXN1bHQsIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRoZSBuZXcgcG9zdHMgcmVzdWx0cyB0byB0aGUgb2xkIG9uZVxuICAgICAgICAgICAgICAgICAgICBhbGxQb3N0czogWy4uLnByZXZpb3VzUmVzdWx0LmFsbFBvc3RzLCAuLi5mZXRjaE1vcmVSZXN1bHQuYWxsUG9zdHNdXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoZXJyb3IpIHJldHVybiA8ZGl2PmVycm9yIG1zZzwvZGl2PlxuICAgIGlmIChsb2FkaW5nICYmICFsb2FkaW5nTW9yZVBvc3RzKSByZXR1cm4gPGRpdj5Mb2FkaW5nPC9kaXY+XG5cbiAgICBjb25zdCB7IGFsbFBvc3RzLCBfYWxsUG9zdHNNZXRhIH0gPSBkYXRhO1xuICAgIGNvbnN0IGFyZU1vcmVQb3N0cyA9IGFsbFBvc3RzLmxlbmd0aCA8IF9hbGxQb3N0c01ldGEuY291bnRcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxzZWN0aW9uPlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIHthbGxQb3N0cy5tYXAoKHBvc3QsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e3Bvc3QuaWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57aW5kZXggKyAxfS4gPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e3Bvc3QudXJsfT57cG9zdC50aXRsZX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICB7YXJlTW9yZVBvc3RzICYmIChcbiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IGxvYWRNb3JlUG9zdHMoKX0gZGlzYWJsZWQ9e2xvYWRpbmdNb3JlUG9zdHN9PlxuICAgICAgICAgICAgICAgICAgICB7bG9hZGluZ01vcmVQb3N0cyA/ICdMb2FkaW5nLi4uJyA6ICdTaG93IE1vcmUnfVxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgc2VjdGlvbiB7XG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDIwcHg7XG4gICAgICAgIH1cbiAgICAgICAgbGkge1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgIH1cbiAgICAgICAgZGl2IHtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIH1cbiAgICAgICAgYSB7XG4gICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDA7XG4gICAgICAgICAgYm9yZGVyOiAwO1xuICAgICAgICB9XG4gICAgICAgIHNwYW4ge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICAgICAgfVxuICAgICAgICB1bCB7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmJlZm9yZSB7XG4gICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICAgICAgYm9yZGVyLXdpZHRoOiA2cHggNHB4IDAgNHB4O1xuICAgICAgICAgIGJvcmRlci1jb2xvcjogI2ZmZmZmZiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcbiAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICBoZWlnaHQ6IDA7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICAgICAgd2lkdGg6IDA7XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgIClcbn1cbiJdfQ== */\\n/*@ sourceURL=/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js */\"));\n}","map":{"version":3,"sources":["/Users/lamperouge/code/Lamperoyge/react-next-goals/client/components/Posts/List.js"],"names":["gql","Link","useQuery","NetworkStatus","graphql","React","ALL_POSTS_QUERY","allPostsQueryVars","skip","first","PostList","loading","error","data","fetchMore","networkStatus","variables","notifyOnNetworkStatusChange","loadingMorePosts","loadMorePosts","allPosts","length","updateQuery","previousResult","fetchMoreResult","_allPostsMeta","areMorePosts","count","map","post","index","id","url","title"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,eAAe,GAAGN,GAAI;;;;;;;;;;;;;CAA5B;AAcP,OAAO,MAAMO,iBAAiB,GAAG;AAC7BC,EAAAA,IAAI,EAAE,CADuB;AAE7BC,EAAAA,KAAK,EAAE;AAFsB,CAA1B;AAKP,eAAe,SAASC,QAAT,GAAqB;AAChC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAAqDb,QAAQ,CAC/DI,eAD+D,EAE/D;AACIU,IAAAA,SAAS,EAAET,iBADf;AAEI;AACA;AACA;AACAU,IAAAA,2BAA2B,EAAE;AALjC,GAF+D,CAAnE;AAWA,QAAMC,gBAAgB,GAAGH,aAAa,KAAKZ,aAAa,CAACW,SAAzD;;AAEA,QAAMK,aAAa,GAAG,MAAM;AACxBL,IAAAA,SAAS,CAAC;AACNE,MAAAA,SAAS,EAAE;AACPR,QAAAA,IAAI,EAAEY,QAAQ,CAACC;AADR,OADL;AAINC,MAAAA,WAAW,EAAE,CAACC,cAAD,EAAiB;AAAEC,QAAAA;AAAF,OAAjB,KAAyC;AAClD,YAAI,CAACA,eAAL,EAAsB;AAClB,iBAAOD,cAAP;AACH;;AACD,eAAO,eAAc,EAAd,EAAkBA,cAAlB,EAAkC;AACrC;AACAH,UAAAA,QAAQ,EAAE,CAAC,GAAGG,cAAc,CAACH,QAAnB,EAA6B,GAAGI,eAAe,CAACJ,QAAhD;AAF2B,SAAlC,CAAP;AAIH;AAZK,KAAD,CAAT;AAcH,GAfD;;AAiBA,MAAIR,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACX,MAAID,OAAO,IAAI,CAACO,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAElC,QAAM;AAAEE,IAAAA,QAAF;AAAYK,IAAAA;AAAZ,MAA8BZ,IAApC;AACA,QAAMa,YAAY,GAAGN,QAAQ,CAACC,MAAT,GAAkBI,aAAa,CAACE,KAArD;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,QAAQ,CAACQ,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KACV;AAAI,IAAA,GAAG,EAAED,IAAI,CAACE,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOD,KAAK,GAAG,CAAf,OADJ,EAEI;AAAG,IAAA,IAAI,EAAED,IAAI,CAACG,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBH,IAAI,CAACI,KAAzB,CAFJ,CADJ,CADH,CADL,CADJ,EAWKP,YAAY,IACT;AAAQ,IAAA,OAAO,EAAE,MAAMP,aAAa,EAApC;AAAwC,IAAA,QAAQ,EAAED,gBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,gBAAgB,GAAG,YAAH,GAAkB,WADvC,CAZR;AAAA;AAAA;AAAA,6+LADJ;AAyDH","sourcesContent":["import gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { useQuery } from '@apollo/react-hooks'\nimport { NetworkStatus } from 'apollo-boost'\nimport { graphql } from \"react-apollo\";\nimport React from 'react';\n\n\nexport const ALL_POSTS_QUERY = gql`\n  query allPosts($first: Int!, $skip: Int!) {\n    allPosts(orderBy: createdAt_DESC, first: $first, skip: $skip) {\n      id\n      name\n      description\n      image\n      createdAt\n    }\n    _allPostsMeta {\n      count\n    }\n  }\n`;\nexport const allPostsQueryVars = {\n    skip: 0,\n    first: 10\n};\n\nexport default function PostList () {\n    const { loading, error, data, fetchMore, networkStatus } = useQuery(\n        ALL_POSTS_QUERY,\n        {\n            variables: allPostsQueryVars,\n            // Setting this value to true will make the component rerender when\n            // the \"networkStatus\" changes, so we are able to know if it is fetching\n            // more data\n            notifyOnNetworkStatusChange: true\n        }\n    )\n\n    const loadingMorePosts = networkStatus === NetworkStatus.fetchMore\n\n    const loadMorePosts = () => {\n        fetchMore({\n            variables: {\n                skip: allPosts.length\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n                if (!fetchMoreResult) {\n                    return previousResult\n                }\n                return Object.assign({}, previousResult, {\n                    // Append the new posts results to the old one\n                    allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n                })\n            }\n        })\n    }\n\n    if (error) return <div>error msg</div>\n    if (loading && !loadingMorePosts) return <div>Loading</div>\n\n    const { allPosts, _allPostsMeta } = data;\n    const areMorePosts = allPosts.length < _allPostsMeta.count\n\n    return (\n        <section>\n            <ul>\n                {allPosts.map((post, index) => (\n                    <li key={post.id}>\n                        <div>\n                            <span>{index + 1}. </span>\n                            <a href={post.url}>{post.title}</a>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n            {areMorePosts && (\n                <button onClick={() => loadMorePosts()} disabled={loadingMorePosts}>\n                    {loadingMorePosts ? 'Loading...' : 'Show More'}\n                </button>\n            )}\n            <style jsx>{`\n        section {\n          padding-bottom: 20px;\n        }\n        li {\n          display: block;\n          margin-bottom: 10px;\n        }\n        div {\n          align-items: center;\n          display: flex;\n        }\n        a {\n          font-size: 14px;\n          margin-right: 10px;\n          text-decoration: none;\n          padding-bottom: 0;\n          border: 0;\n        }\n        span {\n          font-size: 14px;\n          margin-right: 5px;\n        }\n        ul {\n          margin: 0;\n          padding: 0;\n        }\n        button:before {\n          align-self: center;\n          border-style: solid;\n          border-width: 6px 4px 0 4px;\n          border-color: #ffffff transparent transparent transparent;\n          content: '';\n          height: 0;\n          margin-right: 5px;\n          width: 0;\n        }\n      `}</style>\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}