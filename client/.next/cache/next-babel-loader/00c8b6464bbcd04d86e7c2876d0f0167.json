{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/lamperouge/code/Lamperoyge/react-next-goals/client/lib/apollo.js\";\nvar __jsx = React.createElement;\nimport React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = useMemo(function () {\n      return apolloClient || initApolloClient(apolloState);\n    }, []);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  } // Allow Next.js to remove getInitialProps from the browser build\n\n\n  if (false) {\n    if (ssr) {\n      WithApollo.getInitialProps =\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var AppTree, pageProps, apolloClient, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  AppTree = ctx.AppTree;\n                  pageProps = {};\n\n                  if (!PageComponent.getInitialProps) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return PageComponent.getInitialProps(ctx);\n\n                case 5:\n                  pageProps = _context.sent;\n\n                case 6:\n                  // Run all GraphQL queries in the component tree\n                  // and extract the resulting data\n                  apolloClient = initApolloClient();\n                  _context.prev = 7;\n                  _context.next = 10;\n                  return require('@apollo/react-ssr').getDataFromTree(__jsx(AppTree, {\n                    pageProps: _objectSpread({}, pageProps, {\n                      apolloClient: apolloClient\n                    }),\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 60\n                    },\n                    __self: this\n                  }));\n\n                case 10:\n                  _context.next = 15;\n                  break;\n\n                case 12:\n                  _context.prev = 12;\n                  _context.t0 = _context[\"catch\"](7);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 15:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind(); // Extract query data from the Apollo store\n\n                  apolloState = apolloClient.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 18:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[7, 12]]);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n    }\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  var isBrowser = true;\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:1337',\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      // Use fetch() polyfill on the server\n      fetch: !isBrowser && fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/lamperouge/code/Lamperoyge/react-next-goals/client/lib/apollo.js"],"names":["React","useMemo","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","process","env","NODE_ENV","displayName","name","console","warn","getInitialProps","ctx","AppTree","require","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","isBrowser","connectToDevTools","ssrMode","link","uri","credentials","restore"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost'\nimport fetch from 'isomorphic-unfetch'\n\nlet apolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo (PageComponent, { ssr = true } = {}) {\n    const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n        const client = useMemo(\n            () => apolloClient || initApolloClient(apolloState),\n            []\n        )\n        return (\n            <ApolloProvider client={client}>\n                <PageComponent {...pageProps} />\n            </ApolloProvider>\n        )\n    }\n\n    // Set the correct displayName in development\n    if (process.env.NODE_ENV !== 'production') {\n        const displayName =\n            PageComponent.displayName || PageComponent.name || 'Component'\n\n        if (displayName === 'App') {\n            console.warn('This withApollo HOC only works with PageComponents.')\n        }\n\n        WithApollo.displayName = `withApollo(${displayName})`\n    }\n\n    // Allow Next.js to remove getInitialProps from the browser build\n    if (typeof window === 'undefined') {\n        if (ssr) {\n            WithApollo.getInitialProps = async ctx => {\n                const { AppTree } = ctx\n\n                let pageProps = {}\n                if (PageComponent.getInitialProps) {\n                    pageProps = await PageComponent.getInitialProps(ctx)\n                }\n\n                // Run all GraphQL queries in the component tree\n                // and extract the resulting data\n                const apolloClient = initApolloClient()\n\n                try {\n                    // Run all GraphQL queries\n                    await require('@apollo/react-ssr').getDataFromTree(\n                        <AppTree\n                            pageProps={{\n                                ...pageProps,\n                                apolloClient\n                            }}\n                        />\n                    )\n                } catch (error) {\n                    // Prevent Apollo Client GraphQL errors from crashing SSR.\n                    // Handle them in components via the data.error prop:\n                    // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                    console.error('Error while running `getDataFromTree`', error)\n                }\n\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind()\n\n                // Extract query data from the Apollo store\n                const apolloState = apolloClient.cache.extract()\n\n                return {\n                    ...pageProps,\n                    apolloState\n                }\n            }\n        }\n    }\n\n    return WithApollo\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient (initialState) {\n    // Make sure to create a new client for every server-side request so that data\n    // isn't shared between connections (which would be bad)\n    if (typeof window === 'undefined') {\n        return createApolloClient(initialState)\n    }\n\n    // Reuse client on the client-side\n    if (!apolloClient) {\n        apolloClient = createApolloClient(initialState)\n    }\n\n    return apolloClient\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient (initialState = {}) {\n    // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n    const isBrowser = typeof window !== 'undefined'\n    return new ApolloClient({\n        connectToDevTools: isBrowser,\n        ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n        link: new HttpLink({\n            uri: 'http://localhost:1337', // Server URL (must be absolute)\n            credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n            // Use fetch() polyfill on the server\n            fetch: !isBrowser && fetch\n        }),\n        cache: new InMemoryCache().restore(initialState)\n    })\n}\n"]},"metadata":{},"sourceType":"module"}